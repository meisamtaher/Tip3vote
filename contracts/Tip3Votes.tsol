pragma ton-solidity >= 0.57.0;
import "../node_modules/tip3/contracts/abstract/TokenWalletBurnableByRootBase.sol";
import "../node_modules/tip3/contracts/abstract/TokenWalletBurnableBase.sol";
import "../node_modules/tip3/contracts/abstract/TokenWalletDestroyableBase.sol";

import "../node_modules/tip3/contracts/libraries/TokenErrors.sol";
import "../node_modules/tip3/contracts/libraries/TokenGas.sol";
import "../node_modules/tip3/contracts/libraries/TokenMsgFlag.sol";
import "../node_modules/tip3/contracts/interfaces/IVersioned.sol";

contract TIP3VoteTokenWallet is TokenWalletBurnableBase,
    TokenWalletBurnableByRootBase,
    TokenWalletDestroyableBase{
    struct Checkpoint{
        uint128 fromBlock;
        uint128 vote;
    }
    Checkpoint[] private _checkpoints;
    /**
     * @dev Gets the current votes balance of this wallet
     */
    function getVotes() public view  returns (uint128) {
        uint128 pos = _checkpoints.length;
        return pos == 0 ? 0 : _checkpoints[pos - 1].votes;
    }

    /**
     * @dev Retrieve the number of votes for this wallet at the end of `blockNumber`.
     *
     * Requirements:
     *
     * - `blockNumber` must have been already mined
     */
    function getPastVotes(uint128 blockNumber) public view  returns (uint128) {
        require(blockNumber < block.number, "TIP3Votes: block not yet mined");
        return _checkpointsLookup(_checkpoints,blockNumber);
    }
    /**
     * @dev Lookup a value in a list of (sorted) checkpoints.
     */
    function _checkpointsLookup(Checkpoint[] storage ckpts, uint128 blockNumber) private view returns (uint128) {
        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.
        //
        // Initially we check if the block is recent to narrow the search range.
        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).
        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.
        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)
        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)
        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not
        // out of bounds (in which case we're looking too far in the past and the result is 0).
        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is
        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out
        // the same.
        uint128 length = ckpts.length;

        uint128 low = 0;
        uint128 high = length;

        if (length > 5) {
            uint256 mid = length - Math.sqrt(length);
            if (_unsafeAccess(ckpts, mid).fromBlock > blockNumber) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }

        while (low < high) {
            uint256 mid = Math.average(low, high);
            if (ckpts[mid].fromBlock > blockNumber) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }

        return high == 0 ? 0 : ckpts[high - 1].votes;
    }

    function _addCheckpoint(uint128 balance)private {
        _checkpoints.push(new Checkpoint(balance,block.number));
    }
    function changeBalance(uint128 newBalance)private {
        balance_ = newBalance; 
        _addCheckpoint(newBalance);
    }
    function transfer(
        uint128 amount,
        address recipient,
        uint128 deployWalletValue,
        address remainingGasTo,
        bool notify,
        TvmCell payload
    )
        override
        external
        onlyOwner
    {
        require(amount > 0, TokenErrors.WRONG_AMOUNT);
        require(amount <= balance_, TokenErrors.NOT_ENOUGH_BALANCE);
        require(recipient.value != 0 && recipient != owner_, TokenErrors.WRONG_RECIPIENT);

        tvm.rawReserve(_reserve(), 0);

        TvmCell stateInit = _buildWalletInitData(recipient);

        address recipientWallet;

        if (deployWalletValue > 0) {
            recipientWallet = _deployWallet(stateInit, deployWalletValue, remainingGasTo);
        } else {
            recipientWallet = address(tvm.hash(stateInit));
        }
            
        changeBalance(balance_ - amount);

        ITokenWallet(recipientWallet).acceptTransfer{ value: 0, flag: TokenMsgFlag.ALL_NOT_RESERVED, bounce: true }(
            amount,
            owner_,
            remainingGasTo,
            notify,
            payload
        );
    }
}